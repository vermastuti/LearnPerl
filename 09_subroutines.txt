=========================================

#! /usr/bin/perl
sub disp
{
	print "Hello\n";
}

&disp;
&disp;
disp;

=========================================

#! /usr/bin/perl
sub big
{
	if ($a > $b)
	{
		 return $a;
	}
	else
	
	{
		 return $b;
	}
}

$a = 100;
$b = 200;
$big = &big ($a, $b);
print "$big\n";
=========================================

#! /usr/bin/perl
sub add
{
	print "In Add\n";
	return $a + $b;
}
$a = 10;
$b = 10;
$sum = &add( $a , $b);
print "$sum\n";

=========================================
# use ARGV 
#! /usr/bin/perl
sub add
{
	return $a + $b;
}
$a = $ARGV[0];
$b = $ARGV[1];
$sum = &add( $a , $b);
print "$sum\n";

=========================================

#! /usr/bin/perl
sub big
{
	$cnt = @_;
	print "$cnt\n";
	if($cnt != 2)
	{
		print "Not two arguments\n";
	}
	else
	{
		print "Two arguments\n";
	}
	$no = $#_ + 1;
	print "$no\n";
}
&big(10,20);
=========================================

#! /usr/bin/perl
sub big
{
	print "@_\n";
	my $m ;
	my $n ;
	$m = $_[0];
	$n = $_[1];
	if ( $m  > $n)
	{
		$m;
	}
	else
	{
		$n;
	}
}
$a = 10;
$b = 20;
$big = &big ($a,$b);
print "$big\n";
=========================================
# Use @_
#! /usr/bin/perl
sub big
{
	print "@_\n";
	if ( $_[0] > $_[1])
	{
		$_[0];
	}
	else
	{
		$_[1];
	}
}
$a = 10;
$b = 20;
$big = &big ($a,$b);
print "$big\n";

=========================================
# Return list
#! /usr/bin/perl
sub sortarr
{
	return sort @_;
}
@arr = &sortarr(8,2,6,4);
print "@arr\n";
=========================================
# Range op example
#! /usr/bin/perl
sub sortarr
{	
	if ( $_[0] > $_[1] )
	{
		reverse $_[1]..$_[0];
	}
	else
	{
		$_[0]..$_[1];
	}

}
@arr = &sortarr(10,1);
print "@arr\n";